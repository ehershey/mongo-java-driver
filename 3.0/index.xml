<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB Java Driver</title>
    <link>/mongo-java-driver/3.0/</link>
    <description>Recent content on MongoDB Java Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2015 22:39:26 -0400</lastBuildDate>
    <atom:link href="/mongo-java-driver/3.0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JSON support</title>
      <link>/mongo-java-driver/3.0/reference/json-support/</link>
      <pubDate>Thu, 19 Mar 2015 22:39:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/json-support/</guid>
      <description></description>
    </item>
    
    <item>
      <title>System Requirements</title>
      <link>/mongo-java-driver/3.0/reference/system-requirements/</link>
      <pubDate>Thu, 19 Mar 2015 16:39:22 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/system-requirements/</guid>
      <description>

&lt;h1 id=&#34;system-requirements:713449ef5ae6758386844a511f29cc91&#34;&gt;System Requirements&lt;/h1&gt;

&lt;p&gt;The 3.0 Java driver will run with Java 6 or later.  However, specific features require Java 7:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default SSL support requires Java 7 in order to perform SSL host name verification, which is enabled by default.  See
&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/reference/ssl/#host-name-verification:3c79738ba42290c5c30beda88b41710e&#34;&gt;SSL&lt;/a&gt; for details on how to disable host name verification.&lt;/li&gt;
&lt;li&gt;By default the asynchronous API requires Java 7, as it relies on
&lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/nio/channels/AsynchronousSocketChannel.html&#34;&gt;AsynchronousSocketChannel&lt;/a&gt; for
its implementation.  See &lt;a href=&#34;No page found with path or logical name &#34;async&#34;.
&#34;&gt;Async&lt;/a&gt; for details on how to use &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Authenticating</title>
      <link>/mongo-java-driver/3.0/reference/authenticating/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/authenticating/</guid>
      <description>

&lt;h1 id=&#34;authenticating:7010764a78ee04293fe005f4d2277400&#34;&gt;Authenticating&lt;/h1&gt;

&lt;p&gt;The Java driver supports all MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/&#34;&gt;authentication mechanisms&lt;/a&gt;, including those
included only in the &lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Authentication credentials are created by the application as instances of
&lt;a href=&#34;http://api.mongodb.org/java/current/com/mongodb/MongoCredential.html&#34;&gt;MongoCredential&lt;/a&gt;, which includes static factory methods for each
of the supported authentication mechanisms.  A list of these instances must be passed to the driver via one of several
 &lt;a href=&#34;http://api.mongodb.org/java/current/com/mongodb/MongoCredential.html&#34;&gt;MongoClient&lt;/a&gt; constructors that take a
 parameter of type &lt;code&gt;List&amp;lt;MongoCredential&amp;gt;&lt;/code&gt;.   Note that due to the flexibilty of role-based access control in MongoDB, it is usually
 sufficient to authenticate with a single user, but for completeness the driver takes a list of credentials is always accepted.&lt;/p&gt;

&lt;h2 id=&#34;default-authentication-mechanism:7010764a78ee04293fe005f4d2277400&#34;&gt;Default authentication mechanism&lt;/h2&gt;

&lt;p&gt;MongoDB 3.0 changed the default authentication mechanism from
&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt; to
&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;.  To create a credential that will
authenticate properly regardless of server version, create a credential using the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;   import com.mongodb.MongoCredential;

    // ...

    String user;        // the user name
    String database;    // the name of the database in which the user is defined
    char[] password;    // the password as a character array
    // ...
    MongoCredential credential = MongoCredential.createCredential(user,
                                                                  database,
                                                                  password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the recommended approach as it will make upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/#upgrade-mongodb-cr-to-scram&#34;&gt;upgrading the
authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;scram-sha-1:7010764a78ee04293fe005f4d2277400&#34;&gt;SCRAM-SHA-1&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb .org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;
use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoCredential credential = MongoCredential.createScramSha1Credential(user,
                                                                           database,
                                                                           password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=SCRAM-SHA-1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongodb-cr:7010764a78ee04293fe005f4d2277400&#34;&gt;MONGODB-CR&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt;
use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoCredential credential = MongoCredential.createMongoCRCredential(user,
                                                                         database,
                                                                         password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=MONGODB-CR&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is not recommended as a credential created in this way will fail to authenticate after an authentication schema upgrade
from MONGODB-CR to SCRAM-SHA-1.&lt;/p&gt;

&lt;h2 id=&#34;x-509:7010764a78ee04293fe005f4d2277400&#34;&gt;x.509&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;x.509&lt;/a&gt; mechanism authenticates a user
whose name is derived from the distinguished subject name of the X.509 certificate presented by the driver during SSL negotiation. This
authentication method requires the use of SSL connections with certificate validation and is available in MongoDB 2.6 and newer. To
create a credential of this type use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    String user;     // The x.509 certificate derived user name
    MongoCredential credential = MongoCredential.createMongoX509Credential(user);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://subjectName@host1/?authMechanism=MONGODB-X509&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the MongoDB server
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user&#34;&gt;x.509 tutorial&lt;/a&gt; for
more information about determining the subject name from the certificate.&lt;/p&gt;

&lt;h2 id=&#34;kerberos-gssapi:7010764a78ee04293fe005f4d2277400&#34;&gt;Kerberos (GSSAPI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through Kerberos service.  To
create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#kerberos-authentication&#34;&gt;Kerberos (GSSAPI)&lt;/a&gt; use the
following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    String user;   // The Kerberos user name, including the realm, e.g. &amp;quot;user1@MYREALM.ME&amp;quot;
    // ...
    MongoCredential credential = MongoCredential.createGSSAPICredential(user);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://username%40REALM.com@host1/?authMechanism=GSSAPI&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the method refers to the &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism instead of &lt;code&gt;Kerberos&lt;/code&gt; because technically the driver is authenticating
via the &lt;a href=&#34;https://tools.ietf.org/html/rfc4752&#34;&gt;GSSAPI&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;p&gt;To successfully authenticate via Kerberos, the application typically must specify several system properties so that the underlying GSSAPI
 Java libraries can acquire a Kerberos ticket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.security.krb5.realm=MYREALM.ME
java.security.krb5.kdc=mykdc.myrealm.me
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ldap-plain:7010764a78ee04293fe005f4d2277400&#34;&gt;LDAP (PLAIN)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory
Access Protocol (LDAP) service.  To create a credential of type &lt;a href=&#34;http://docs.mongodb
.org/manual/core/authentication/#ldap-proxy-authority-authentication&#34;&gt;LDAP&lt;/a&gt; use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    String user;          // The LDAP user name
    char[] password;      // The LDAP password
    // ...
    MongoCredential credential = MongoCredential.createPlainCredential(user, &amp;quot;$external&amp;quot;, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1@host1/?authSource=$external&amp;amp;authMechanism=PLAIN&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the method refers to the &lt;code&gt;plain&lt;/code&gt; authentication mechanism instead of &lt;code&gt;LDAP&lt;/code&gt; because technically the driver is authenticating
via the &lt;a href=&#34;https://www.ietf.org/rfc/rfc4616.txt&#34;&gt;PLAIN&lt;/a&gt; SASL mechanism.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrading to 3.0</title>
      <link>/mongo-java-driver/3.0/whats-new/upgrading/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:39 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/whats-new/upgrading/</guid>
      <description>

&lt;h1 id=&#34;upgrading-to-3-0:104d6ec20d3c9fec84381edf43ec4f2f&#34;&gt;Upgrading to 3.0&lt;/h1&gt;

&lt;p&gt;Compatibility with the 2.x driver release series has been intentionally broken by this release.  Where possible, breaking changes have been
deprecated in the 2.13 driver series, so before upgrading to 3.0.0 please first compile against 2.13.0 with deprecation warnings enabled and
remove use of any deprecated methods or classes.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a list of the most significant backwards-breaking changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL host name verification has been enabled by default: the driver now enables host name verification by default for SSL connections.  If
you are using an invalid certificate or are using Java 6 (with which the driver does not support host name verification), set the
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/MongoClientOptions.html#isSslInvalidHostNameAllowed--&#34;&gt;sslInvalidHostNameAllowed&lt;/a&gt;
property to true.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DB.html#requestStart--&#34;&gt;requestStart&lt;/a&gt; and
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DB.html#requestDone--&#34;&gt;requestDone&lt;/a&gt; methods in
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DB.html&#34;&gt;DB&lt;/a&gt; have been removed: These methods have been removed in accordance with the
&lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst#what-happened-to-pinning&#34;&gt;server selection specification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://api.mongodb.org/java/2.13/com/mongodb/ServerAddress.html&#34;&gt;ServerAddress&lt;/a&gt; and
&lt;a href=&#34;http://api.mongodb.org/java/2.13/com/mongodb/MongoClient.html&#34;&gt;MongoClient&lt;/a&gt; constructors no longer throw
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/net/UnknownHostException.html&#34;&gt;UnknownHostException&lt;/a&gt;: This breaks source but not binary
compatibility, so re-compilation with 3.0 will only succeed after removing any reference to this exception in catch blocks or method
throws declarations.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://api.mongodb.org/java/2.13/com/mongodb/WriteResult.html#getLastError--&#34;&gt;getLastError&lt;/a&gt; method in
&lt;a href=&#34;http://api.mongodb.org/java/2.13/com/mongodb/WriteResult.html&#34;&gt;WriteResult&lt;/a&gt; has been removed: this method does not work reliably in
the 2.x series and there is no way to make work reliably, so it has been removed.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/MongoClientOptions.html#isAutoConnectRetry--&#34;&gt;autoConnectRetry&lt;/a&gt; and
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/MongoClientOptions.html#getMaxAutoConnectRetryTime--&#34;&gt;maxAutoConnectRetryTime&lt;/a&gt; properties in
&lt;a href=&#34;http://api.mongodb.org/java/2.13/com/mongodb/MongoClientOptions.html&#34;&gt;MongoClientOptions&lt;/a&gt; have been removed: these methods have been the
source of much confusion to users, who typically think it&amp;rsquo;s about re-connecting to the primary during an election.  As no other
MongoDB-supported drivers support these properties, they have been removed.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DB.html#authenticate-java.lang.String-char:A-&#34;&gt;authenticate&lt;/a&gt; method in the
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DB.html&#34;&gt;DB&lt;/a&gt; class has been removed: replace with use of
&lt;a href=&#34;http://api.mongodb.org/java/2.13/com/mongodb/MongoClient.html#MongoClient-java.util.List-java.util.List-&#34;&gt;MongoClient constructors&lt;/a&gt; that
take &lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/MongoCredential.html&#34;&gt;MongoCredential&lt;/a&gt; instances.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DBCollection.html#ensureIndex-com.mongodb.DBObject-&#34;&gt;ensureIndex&lt;/a&gt; methods in
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DBCollection.html&#34;&gt;DBCollection&lt;/a&gt; have been removed:
replace with the corresponding
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DBCollection.html#createIndex-com.mongodb.DBObject-&#34;&gt;createIndex&lt;/a&gt; method.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DBRefBase.html#fetch--&#34;&gt;fetch&lt;/a&gt; method in
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DBRef.html&#34;&gt;DBRef&lt;/a&gt; has been removed: use the
&lt;a href=&#34;https://api.mongodb.org/java/2.13/com/mongodb/DBCollection.html#findOne-java.lang.Object-&#34;&gt;findOne&lt;/a&gt; method instead.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What&#39;s New</title>
      <link>/mongo-java-driver/3.0/whats-new/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:35 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/whats-new/</guid>
      <description>

&lt;h1 id=&#34;what-s-new-in-3-0:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;What&amp;rsquo;s New in 3.0&lt;/h1&gt;

&lt;p&gt;The 3.0 driver ships with a host of new features, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A generic &lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoCollection.html&#34;&gt;MongoCollection&lt;/a&gt; interface that complies with a new cross-driver &lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/crud/crud.rst&#34;&gt;CRUD specification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A new &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/tree/master/driver-async&#34;&gt;asynchronous API&lt;/a&gt; that can leverage either &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt;
or Java 7&amp;rsquo;s &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/nio/channels/AsynchronousSocketChannel.html&#34;&gt;AsynchronousSocketChannel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A new &lt;a href=&#34;http://api.mongodb.org/java/3.0/org/bson/codecs/Codec.html&#34;&gt;Codec&lt;/a&gt; infrastructure that you can use to build high-performance
encoders and decoders without requiring an intermediate Map instance.&lt;/li&gt;
&lt;li&gt;A new core driver on top of which you can build alternative or experimental driver APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;upgrading:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Upgrading&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/whats-new/upgrading/&#34;&gt;upgrading guide&lt;/a&gt; on how to upgrade to 3.0&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/mongo-java-driver/3.0/reference/connecting/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/connecting/</guid>
      <description>

&lt;h2 id=&#34;connecting-to-mongodb:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Connecting to MongoDB&lt;/h2&gt;

&lt;p&gt;General information about connecting to MongoDB servers.&lt;/p&gt;

&lt;h3 id=&#34;connection-string:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Connection String&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; is the simplest way to connect to one or more
MongoDB servers. A connection string mostly follows &lt;a href=&#34;http://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt; with the exception of the domain name.
 For MongoDB, it is possible to list multiple domain names separated by a comma. Below are some example connection strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For a standalone mongod, mongos, or a direct connection to a member of a replica set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host:27017
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To connect to multiple mongos or a replica set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host1:27017,host2:27017
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/reference/authenticating/&#34;&gt;authentication guide&lt;/a&gt; contains information on how to provide credentials.&lt;/p&gt;

&lt;h4 id=&#34;the-database-component:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;The Database Component&lt;/h4&gt;

&lt;p&gt;The database component is optional and is used to indicate which database to authenticate against. When the database component is not
provided, the &amp;ldquo;admin&amp;rdquo; database is used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host:27017/mydb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, the database by the name of &amp;ldquo;mydb&amp;rdquo; is where the credentials are stored for the application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that some drivers utilize the database component to indicate which database to work with by default. The Java driver, while it
parses the database component, does not use the database component for anything other than authentication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;options:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;Options&lt;/h4&gt;

&lt;p&gt;Many options can be provided via the connection string. The ones that cannot may be provided in a &lt;code&gt;MongoClientOptions&lt;/code&gt; instance. To
provide an option, append a &lt;code&gt;?&lt;/code&gt; to the connection string and separate options by an &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://host:27017/?replicaSet=rs0&amp;amp;maxPoolSize=200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above connection string sets the &amp;ldquo;replicaSet&amp;rdquo; value to &amp;ldquo;rs0&amp;rdquo; and the &amp;ldquo;maxPoolSize&amp;rdquo; to &amp;ldquo;200&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For a comprehensive list of the available options, see the &lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/MongoClientURI.html&#34;&gt;MongoClientURI&lt;/a&gt;
documentation.&lt;/p&gt;

&lt;h3 id=&#34;mongoclient:d67a243cdf521fafcb45cf3f560d3e12&#34;&gt;MongoClient&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;MongoClient&lt;/code&gt; instance will be the root object for all interaction with MongoDB. It is all that is needed to handle connecting to
servers, monitoring servers, and performing operations against those servers. Without any arguments, constructing a &lt;code&gt;MongoClient&lt;/code&gt;
instance will connect to &amp;ldquo;localhost&amp;rdquo; port 27017.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, a connection string may be provided:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = new MongoClient(new MongoClientURI(&amp;quot;mongodb://host:27017,host2:27017/?replicaSet=rs0&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the &lt;code&gt;MongoClientOptions&lt;/code&gt; class provides an in-code way to set the same options from a connection string.  This is sometimes
necessary, as the connection string does not allow an application to configure as many configuration options as &lt;code&gt;MongoClientOptions&lt;/code&gt;.&lt;br /&gt;
&lt;code&gt;MongoClientOptions&lt;/code&gt; instances are immutable, so to create one your application uses a builder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientOptions options = MongoClientOptions.builder().cursorFinalizerEnabled(false).build();
MongoClient client = new MongoClient(options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s also possible to combine &lt;code&gt;MongoClientOptions&lt;/code&gt; with &lt;code&gt;MongoClientURI&lt;/code&gt;, for situations where your application needs to set some options
in code but others via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://host:27017,host2:27017/?replicaSet=rs0&amp;quot;, 
                                        MongoClientOptions.builder().cursorFinalizerEnabled(false))
MongoClient client = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SSL</title>
      <link>/mongo-java-driver/3.0/reference/ssl/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/ssl/</guid>
      <description>

&lt;h1 id=&#34;ssl:3c79738ba42290c5c30beda88b41710e&#34;&gt;SSL&lt;/h1&gt;

&lt;p&gt;The Java driver supports SSL connections to MongoDB servers using the underlying support for SSL provided by the JDK. You can configure
the driver to use SSL either with &lt;code&gt;MongoClientURI&lt;/code&gt; or with &lt;code&gt;MongoClientOptions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;MongoClientURI&lt;/code&gt;, specify `ssl=true as a query parameter, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    new MongoClientURI(&amp;quot;mongodb://localhost/?ssl=true&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;MongoClientOptions&lt;/code&gt;, set the sslEnabled property to true, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientOptions.builder().sslEnabled(true).build()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;host-name-verification:3c79738ba42290c5c30beda88b41710e&#34;&gt;Host name verification&lt;/h2&gt;

&lt;p&gt;By default, the driver ensures that the host name included in the server&amp;rsquo;s SSL certificate(s) matches the host name(s) provided when
constructing a &lt;code&gt;MongoClient&lt;/code&gt;.  However, this host name verification requires a Java 7 JVM, as it relies on additions to the
&lt;code&gt;javax.net.SSLParameters&lt;/code&gt; class that were introduced in Java 7.  If your application must run on Java 6, or for some other reason you need
 to disable host name verification, you must expicitly indicate this in &lt;code&gt;MongoClientOptions&lt;/code&gt; using the &lt;code&gt;sslInvalidHostNameAllowed&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    MongoClientOptions.builder().sslEnabled(true).sslInvalidHostNameAllowed(true).build()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jvm-system-properties:3c79738ba42290c5c30beda88b41710e&#34;&gt;JVM system properties&lt;/h2&gt;

&lt;p&gt;A typical application will need to set several JVM system properties to ensure that the client is able to validate the SSL certificate
presented by the server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.trustStore&lt;/code&gt;: the path to a trust store containing the certificate of the signing authority&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.trustStorePassword&lt;/code&gt;: the password to access this trust store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trust store is typically created with the &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;keytool&lt;/a&gt;
command line program provided as part of the JDK.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    keytool -importcert -trustcacerts -file &amp;lt;path to certificate authority file&amp;gt; 
        -keystore &amp;lt;path to trust store&amp;gt; -storepass &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A typical application will also need to set several JVM system properties to ensure that the client presents an SSL certificate to the
MongoDB server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.keyStore&lt;/code&gt;: the path to a key store containing the client&amp;rsquo;s SSL certificates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.keyStorePassword&lt;/code&gt;: the password to access this key store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key store is typically created with &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;keytool&lt;/a&gt; or with the
&lt;a href=&#34;https://www.openssl.org/docs/apps/openssl.html&#34;&gt;openssl&lt;/a&gt; command line program.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/mongo-java-driver/3.0/reference/monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/monitoring/</guid>
      <description>

&lt;h1 id=&#34;monitoring:cc05611fd873a7cd9f74d7c5b2563b10&#34;&gt;Monitoring&lt;/h1&gt;

&lt;p&gt;The driver uses &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jmx/&#34;&gt;JMX&lt;/a&gt; to create
&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html&#34;&gt;MXBeans&lt;/a&gt; that allow an
application or end user to monitor various aspects of the driver.&lt;/p&gt;

&lt;p&gt;The driver creates MXBean instances of a single type:
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/management/ConnectionPoolStatisticsMBean.html&#34;&gt;ConnectionPoolStatisticsMBean&lt;/a&gt;.  The driver
registers one instance of this MXBean interface per server that it is connected to.  So in the case of a replica set, for example, there
will be an instance per non-hidden member of the replica set.&lt;/p&gt;

&lt;p&gt;Each MXBean instance is required to be registered with a unique object name. All MBean instances created by the driver are under the
domain &lt;code&gt;org.mongodb.driver&lt;/code&gt;.  Instances of &lt;code&gt;ConnectionPoolStatisticsMBean&lt;/code&gt; will have the properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clusterId&lt;/code&gt;: a client-generated unique identifier that is required for to ensure object name uniqueness in situations where an
application has mulitiple &lt;code&gt;MongoClient&lt;/code&gt; instances connection to the same MongoDB server deployment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;: the host name of the server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;: the port the server is listening on&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/mongo-java-driver/3.0/reference/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/logging/</guid>
      <description>

&lt;h1 id=&#34;logging:3f3af53408cff75953b33723c0b061bb&#34;&gt;Logging&lt;/h1&gt;

&lt;p&gt;By default logging is enabled via the popular &lt;a href=&#34;http://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt; API.  But it&amp;rsquo;s optional: if the driver detects the presence of
SLF4J on the classpath it will use it. Otherwise, it will fall back to JUL (&lt;code&gt;java.util.logging&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The driver uses the following logger names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.mongodb.driver&lt;/code&gt;: the root logger

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt;: for logs related to monitoring of the MongoDB servers to which the driver connects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;: for logs related to connections and connection pools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt;: for logs related to protocol message sent to and received from a MongoDB server

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: for logs related to insert messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;: for logs related to update messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: for logs related to delete messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;: for logs related to query messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getmore&lt;/code&gt;: for logs related to getmore messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;killcursor&lt;/code&gt;: for logs related to killcursor messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt;: for logs related to command messages and responses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uri&lt;/code&gt;: for logs related to connection string parsing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;management&lt;/code&gt;: for logs related to JMX&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/mongo-java-driver/3.0/issues-help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/issues-help/</guid>
      <description>

&lt;h1 id=&#34;issues-help:ce90a820d60b3f485edfd34eecd462d1&#34;&gt;Issues &amp;amp; Help&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>/mongo-java-driver/3.0/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/</guid>
      <description>

&lt;h2 id=&#34;welcome-to-the-java-mongodb-docs:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Welcome to the Java MongoDB Docs&lt;/h2&gt;

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Quick guide to getting started&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;whats-new-in-3-0:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Whats new in 3.0&lt;/h2&gt;

&lt;p&gt;Summary and link to the 3.0 docs&lt;/p&gt;

&lt;h2 id=&#34;upgrading:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Upgrading&lt;/h2&gt;

&lt;p&gt;Summary and link to the upgrade guide&lt;/p&gt;

&lt;h2 id=&#34;reference:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;Summary and link to the reference guide&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-java-driver/3.0/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/reference/</guid>
      <description>

&lt;h2 id=&#34;mongodb-java-driver-reference-documentation:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;MongoDB Java Driver Reference Documentation&lt;/h2&gt;

&lt;p&gt;This is the reference documentation.  Not sure what to say yet at the top level.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Admin Operations</title>
      <link>/mongo-java-driver/3.0/tutorial/admin-operations/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/admin-operations/</guid>
      <description>

&lt;h1 id=&#34;admin-introduction:8e617e003072f3a207d77f44b5ddc8e8&#34;&gt;Admin Introduction&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/mongo-java-driver/3.0/tutorial/crud-operations/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/crud-operations/</guid>
      <description>

&lt;h1 id=&#34;getting-started:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting Started&lt;/h1&gt;

&lt;h2 id=&#34;introduction:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This page is a brief overview of working with the 3.0 MongoDB Java
Driver.&lt;/p&gt;

&lt;p&gt;For more information about the Java API, please refer to the &lt;a href=&#34;http://api.mongodb.org/java/3.0/index.html&#34;&gt;online API
Documentation for 3.0 Java Driver&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;a-quick-tour:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;A Quick Tour&lt;/h1&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/tree/master#binaries&#34;&gt;Binaries section of the
README&lt;/a&gt;
for instructions on how to include the driver in your project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code snippets come from the QuickTour.java example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/3.0.x/driver/src/examples/tour/QuickTour.java&#34;&gt;driver
source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;making-a-connection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Making a Connection&lt;/h3&gt;

&lt;p&gt;To make a connection to a MongoDB, you need to have at the minimum, the
name of a database to connect to. The database doesn&amp;rsquo;t have to exist -if
it doesn&amp;rsquo;t, MongoDB will create it for you.&lt;/p&gt;

&lt;p&gt;Additionally, you can specify the server address and port when
connecting. The following example shows three ways to connect to the
database &lt;code&gt;mydb&lt;/code&gt; on the local machine :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// To directly connect to a single MongoDB server (note that this will not auto-discover the primary even
// if it&#39;s a member of a replica set:
MongoClient mongoClient = new MongoClient();
// or
MongoClient mongoClient = new MongoClient( &amp;quot;localhost&amp;quot; );
// or
MongoClient mongoClient = new MongoClient( &amp;quot;localhost&amp;quot; , 27017 );
// or, to connect to a replica set, with auto-discovery of the primary, supply a seed list of members
MongoClient mongoClient = new MongoClient(Arrays.asList(new ServerAddress(&amp;quot;localhost&amp;quot;, 27017),
                                      new ServerAddress(&amp;quot;localhost&amp;quot;, 27018),
                                      new ServerAddress(&amp;quot;localhost&amp;quot;, 27019)));
// or use a connection string
MongoClient mongoClient = new MongoClient(new MongoClientURI(&amp;quot;mongodb://localhost:27017,localhost:27018,localhost:27019&amp;quot;));

MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the &lt;code&gt;database&lt;/code&gt; object will be a connection to a MongoDB
server for the specified database. With it, you can do further
operations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; instance actually represents a pool of connections
to the database; you will only need one instance of class
&lt;code&gt;MongoClient&lt;/code&gt; even with multiple threads. See the
concurrency &amp;lt;java-driver-concurrency&amp;gt; doc page for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; class is designed to be thread safe and shared among
threads. Typically you create only 1 instance for a given database
cluster and use it across your application. If for some reason you
decide to create many &lt;code&gt;MongoClient&lt;/code&gt; instances, note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all resource usage limits (max connections, etc) apply per
&lt;code&gt;MongoClient&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;to dispose of an instance, make sure you call &lt;code&gt;MongoClient.close()&lt;/code&gt;
to clean up resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;getting-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting a Collection&lt;/h3&gt;

&lt;p&gt;To get a collection to use, just specify the name of the collection to
the &lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoDatabase.html#getCollection-java.lang.String-&#34;&gt;getCollection(String
collectionName)&lt;/a&gt;
method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have this collection object, you can now do things like insert
data, query for data, etc.&lt;/p&gt;

&lt;h3 id=&#34;inserting-a-document:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Inserting a Document&lt;/h3&gt;

&lt;p&gt;Once you have the collection object, you can insert documents into the
collection. For example, lets make a little document that in JSON would
be represented as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode javascript&#34;&gt;{
   &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;,
   &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;,
   &amp;quot;count&amp;quot; : 1,
   &amp;quot;info&amp;quot; : {
               x : 203,
               y : 102
             }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the above has an &amp;ldquo;inner&amp;rdquo; document embedded within it. To do
this, we can use the
&lt;a href=&#34;http://api.mongodb.org/java/3.0/org/bson/Document.html&#34;&gt;Document&lt;/a&gt; class
to create the document (including the inner document), and then just
simply insert it into the collection using the &lt;code&gt;insertOne()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc = new Document(&amp;quot;name&amp;quot;, &amp;quot;MongoDB&amp;quot;)
               .append(&amp;quot;type&amp;quot;, &amp;quot;database&amp;quot;)
               .append(&amp;quot;count&amp;quot;, 1)
               .append(&amp;quot;info&amp;quot;, new Document(&amp;quot;x&amp;quot;, 203).append(&amp;quot;y&amp;quot;, 102));
collection.insertOne(doc);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;finding-the-first-document-in-a-collection-using-find:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Finding the First Document in a Collection Using &lt;code&gt;find()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To show that the document we inserted in the previous step is there, we
can do a simple
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoCollection.html#find--&#34;&gt;find()&lt;/a&gt;
operation followed by a call to
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoIterable.html#first--&#34;&gt;first()&lt;/a&gt;
to get the first document in the collection. This method returns a
single document, and it&amp;rsquo;s useful for queries which should only match a
single document, or you are only interested in the first. You don&amp;rsquo;t have
to deal with the cursor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document myDoc = collection.find().first();
System.out.println(myDoc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document{{_id=54b5594843bb7b25f1c9da72, name=MongoDB, type=database, count=1, info=Document{{x=203, y=102}}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; element has been added automatically by MongoDB to your
document. Remember, MongoDB reserves element names that start with
&amp;ldquo;_&amp;rdquo; and &amp;ldquo;\$&amp;rdquo; for internal use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;adding-multiple-documents:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Adding Multiple Documents&lt;/h3&gt;

&lt;p&gt;In order to do more interesting things with queries, let&amp;rsquo;s add multiple
simple documents to the collection. These documents will just be&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;i&amp;quot; : value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and we can do this fairly efficiently in a loop&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
for (int i = 0; i &amp;lt; 100; i++) {
    documents.add(new Document(&amp;quot;i&amp;quot;, i));
}
collection.insertMany(documents);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;counting-documents-in-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Counting Documents in A Collection&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve inserted 101 documents (the 100 we did in the loop, plus
the first one), we can check to see if we have them all using the
&lt;a href=&#34;http://api.mongodb.org/java/3.0/com/mongodb/client/MongoCollection.html#count--&#34;&gt;count()&lt;/a&gt;
method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;System.out.println(collection.count());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print &lt;code&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;using-a-cursor-to-get-all-the-documents:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Using a Cursor to Get All the Documents&lt;/h3&gt;

&lt;p&gt;In order to get all the documents in the collection, we will use the
&lt;code&gt;find()&lt;/code&gt; method. The &lt;code&gt;find()&lt;/code&gt; method returns a &lt;code&gt;MongoIterable&lt;/code&gt; instance
which allows us to iterate over the set of documents that matched our
query. So to query all of the documents and print them out :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCursor&amp;lt;Document&amp;gt; cursor = collection.find().iterator();
try {
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
} finally {
    cursor.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that should print all 101 documents in the collection.&lt;/p&gt;

&lt;p&gt;Note that while this idiom is permissible:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (Document cur : collection.find()) {
    System.out.println(cur);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;its use is discouraged as the application can leak a cursor if the loop
terminates early.&lt;/p&gt;

&lt;h3 id=&#34;getting-a-single-document-with-a-query-filter:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A Single Document with A Query Filter&lt;/h3&gt;

&lt;p&gt;We can create a filter to pass to the find() method to get a subset of
the documents in our collection. For example, if we wanted to find the
document for which the value of the &amp;ldquo;i&amp;rdquo; field is 71, we would do the
following ;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;myDoc = collection.find(eq(&amp;quot;i&amp;quot;, 71)).first();
System.out.println(myDoc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should just print just one document&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Document{{_id=54b5629643bb7b2a52e19ea3, i=71}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this usage relies on a static import of the Filters.eq method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.mongodb.client.model.Filters.*;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-a-set-of-documents-with-a-query:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A Set of Documents With a Query&lt;/h3&gt;

&lt;p&gt;We can use the query to get a set of documents from our collection. For
example, if we wanted to get all documents where &lt;code&gt;&amp;quot;i&amp;quot; &amp;gt; 50&lt;/code&gt;, we could
write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// now use a range query to get a larger subset
cursor = collection.find(gt(&amp;quot;i&amp;quot;, 50)).iterator();

try {
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
} finally {
    cursor.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which should print the documents where &lt;code&gt;i &amp;gt; 50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could also get a range, say &lt;code&gt;50 &amp;lt; i &amp;lt;= 100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;cursor = collection.find(and(gt(&amp;quot;i&amp;quot;, 50), lte(&amp;quot;i&amp;quot;, 100))).iterator();

try {
    while (cursor.hasNext()) {
        System.out.println(cursor.next());
    }
} finally {
    cursor.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;maxtime:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;MaxTime&lt;/h3&gt;

&lt;p&gt;MongoDB 2.6 introduced the ability to timeout individual queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().maxTime(1, TimeUnit.SECONDS).first();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above the maxTime is set to one second and the query will
be aborted after the full second is up.&lt;/p&gt;

&lt;h3 id=&#34;bulk-operations:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Bulk operations&lt;/h3&gt;

&lt;p&gt;Under the covers MongoDB is moving away from the combination of a write
operation followed by get last error (GLE) and towards a write commands
API. These new commands allow for the execution of bulk
insert/update/delete operations. There are two types of bulk operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations.&lt;/p&gt;

&lt;p&gt;:   Executes all the operation in order and error out on the first
    write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations.&lt;/p&gt;

&lt;p&gt;:   These operations execute all the operations in parallel and
    aggregates up all the errors. Unordered bulk operations do not
    guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at two simple examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 2. Ordered bulk operation - order is guarenteed
collection.bulkWrite(Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                                   new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                                        new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                                   new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                                   new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                                         new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))));


 // 2. Unordered bulk operation - no guarantee of order of operation
collection.bulkWrite(Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                                   new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                                   new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                                        new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                                   new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                                   new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                                         new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4)))),
                     new BulkWriteOptions().ordered(false));
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For servers older than 2.6 the API will down convert the operations,
and support the correct semantics for BulkWriteResult and
BulkWriteException each write operation has to be done one at a time.
It&amp;rsquo;s not possible to down convert 100% so there might be slight edge
cases where it cannot correctly report the right numbers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;quick-tour-of-the-administrative-functions:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Quick Tour of the Administrative Functions&lt;/h2&gt;

&lt;h3 id=&#34;getting-a-list-of-databases:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A List of Databases&lt;/h3&gt;

&lt;p&gt;You can get a list of the available databases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (String name: mongoClient.listDatabaseNames()) {
    System.out.println(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling the &lt;code&gt;getDatabase()&lt;/code&gt; on &lt;code&gt;MongoClient&lt;/code&gt; does not create a database.
Only when a database is written to will a database be created. Examples
would be creating an index or collection or inserting a document into a
collection.&lt;/p&gt;

&lt;h3 id=&#34;dropping-a-database:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Dropping A Database&lt;/h3&gt;

&lt;p&gt;You can drop a database by name using a &lt;code&gt;MongoClient&lt;/code&gt; instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.dropDatabase(&amp;quot;databaseToBeDropped&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Creating A Collection&lt;/h3&gt;

&lt;p&gt;There are two ways to create a collection. Inserting a document will
create the collection if it doesn&amp;rsquo;t exist or calling the
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.createCollection&#34;&gt;createCollection&lt;/a&gt;
command.&lt;/p&gt;

&lt;p&gt;An example of creating a capped collection_ sized to 1 megabyte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.createCollection(&amp;quot;cappedCollection&amp;quot;, new CreateCollectionOptions().capped(true).sizeInBytes(0x100000));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-a-list-of-collections:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting A List of Collections&lt;/h3&gt;

&lt;p&gt;You can get a list of the available collections in a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (String name : database.listCollectionNames()) {
    System.out.println(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dropping-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Dropping A Collection&lt;/h3&gt;

&lt;p&gt;You can drop a collection by using the drop() method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.dropCollection();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should notice that the collection no longer exists.&lt;/p&gt;

&lt;h3 id=&#34;creating-an-index:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Creating An Index&lt;/h3&gt;

&lt;p&gt;MongoDB supports indexes, and they are very easy to add on a collection.
To create an index, you just specify the field that should be indexed,
and specify if you want the index to be ascending (&lt;code&gt;1&lt;/code&gt;) or descending
(&lt;code&gt;-1&lt;/code&gt;). The following creates an ascending index on the &lt;code&gt;i&lt;/code&gt; field :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create an ascending index on the &amp;quot;i&amp;quot; field
 collection.createIndex(new Document(&amp;quot;i&amp;quot;, 1));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;getting-a-list-of-indexes-on-a-collection:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Getting a List of Indexes on a Collection&lt;/h3&gt;

&lt;p&gt;You can get a list of the indexes on a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (final Document index : collection.listIndexes()) {
    System.out.println(index);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should see something like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Document{{v=1, key=Document{{_id=1}}, name=_id_, ns=mydb.test}}
Document{{v=1, key=Document{{i=1}}, name=i_1, ns=mydb.test}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;text-indexes:a1754d8aebaeeb3756b317ef6b864847&#34;&gt;Text indexes&lt;/h3&gt;

&lt;p&gt;MongoDB also provides text indexes to support text search of string
content. Text indexes can include any field whose value is a string or
an array of string elements. To create a text index specify the string
literal &amp;ldquo;text&amp;rdquo; in the index document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create a text index on the &amp;quot;content&amp;quot; field
coll.createIndex(new BasicDBObject(&amp;quot;content&amp;quot;, &amp;quot;text&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of MongoDB 2.6 text indexes are now integrated into the main query
language and enabled by default:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Insert some documents
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 0).append(&amp;quot;content&amp;quot;, &amp;quot;textual content&amp;quot;));
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 1).append(&amp;quot;content&amp;quot;, &amp;quot;additional content&amp;quot;));
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 2).append(&amp;quot;content&amp;quot;, &amp;quot;irrelevant content&amp;quot;));

// Find using the text index
Document search = new Document(&amp;quot;$search&amp;quot;, &amp;quot;textual content -irrelevant&amp;quot;);
Document textSearch = new Document(&amp;quot;$text&amp;quot;, search);
long matchCount = collection.count(textSearch);
System.out.println(&amp;quot;Text search matches: &amp;quot;+ matchCount);

// Find using the $language operator
textSearch = new Document(&amp;quot;$text&amp;quot;, search.append(&amp;quot;$language&amp;quot;, &amp;quot;english&amp;quot;));
matchCount = collection.count(textSearch);
System.out.println(&amp;quot;Text search matches (english): &amp;quot;+ matchCount);

// Find the highest scoring match
Document projection = new Document(&amp;quot;score&amp;quot;, new Document(&amp;quot;$meta&amp;quot;, &amp;quot;textScore&amp;quot;));
myDoc = collection.find(textSearch).projection(projection).first();
System.out.println(&amp;quot;Highest scoring document: &amp;quot;+ myDoc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Text search matches: 2
Text search matches (english): 2
Highest scoring document: Document{{_id=1, content=additional content, score=0.75}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the
text index &amp;lt;/core/index-text&amp;gt; and
\$text query operator &amp;lt;/reference/operator/query/text&amp;gt; documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-java-driver/3.0/tutorial/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.0/tutorial/</guid>
      <description>

&lt;h2 id=&#34;getting-started:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To help you get started quickly on the new driver follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/tutorial/installation-guide/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/tutorial/crud-operations/&#34;&gt;CRUD Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.0/mongo-java-driver/3.0/tutorial/admin-operations/&#34;&gt;Admin Operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>